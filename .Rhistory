<<<<<<< Updated upstream
library(covidregionaldata)
library(dplyr)   # for data manipulation (e.g. aggregating data)
library(scales)   # better date formatting
library(ggplot2)   # for plotting graphs
library(digest)   # creates hash values for data, which is essential for caching, data verification and ensuring reproducibility
setwd("C:/Users/OlamideAdenuga/Desktop/COVID-19 Forecasts Internship Project/HDR-UK-BIP-Covid19-Project")
getwd()
predicted_data = read.csv("predicted_cases.csv")
predicted_data <- predicted_data %>%
filter(region == "United Kingdom")   # filters the data for where the region is United Kingdom
predicted_data$date <- as.Date(predicted_data$date)    # converts the date (column) variable into an actual Date (class) format
predicted_data$region <- NULL   # region variable (column) is redundant and so can be removed using NULL
predicted_data <- predicted_data[, c("date", "confirm")]   # allows me to extract only the 2 variables (columns) that I needed from the data
View(predicted_data)
library(dplyr)   # for data manipulation (e.g. aggregating data)
library(scales)   # better date formatting
library(ggplot2)   # for plotting graphs
library(digest)   # creates hash values for data, which is essential for caching, data verification and ensuring reproducibility
library(COVID19)
setwd("C:/Users/OlamideAdenuga/Desktop/evaluating_covid_19_forecasts_internship_project/hdr_uk_bip_covid_19_project")
getwd()
predicted_data = read.csv("predicted_cases.csv")
predicted_data <- predicted_data %>%
filter(region == "United Kingdom")   # filters the data for where the region is United Kingdom
predicted_data$date <- as.Date(predicted_data$date)    # converts the date (column) variable into an actual Date (class) format
predicted_data$region <- NULL   # region variable (column) is redundant and so can be removed using NULL
predicted_data <- predicted_data[, c("date", "confirm")]
observed_data <- covid19(country = "United Kingdom", level = 1, start = "2022-03-04", end = "2022-06-24")
observed_data$date <- as.Date(observed_data$date)    # converts the date (column) variable into an actual Date (class) format
observed_data <- observed_data[, c("date", "confirmed")]   # allows me to extract only the 2 variables (columns) that I needed from the data
observed_data <- observed_data %>%
rename(confirm = confirmed)
install.packages("tidyverse")
View(observed_data)
View(predicted_data)
df <- data.frame(
date = predicted_data$date,
predicted = predicted_data$confirm,
observed = observed_data$confirm
) %>%
mutate(time = row_number())
library(dplyr)   # for data manipulation (e.g. aggregating data)
library(scales)   # better date formatting
library(ggplot2)   # for plotting graphs
library(tidyverse)
library(digest)   # creates hash values for data, which is essential for caching, data verification and ensuring reproducibility
library(COVID19)
library(dplyr)   # for data manipulation (e.g. aggregating data)
library(scales)   # better date formatting
library(ggplot2)   # for plotting graphs
library(tidyverse)
library(digest)   # creates hash values for data, which is essential for caching, data verification and ensuring reproducibility
library(COVID19)
library(dplyr)   # for data manipulation (e.g. aggregating data)
library(scales)   # better date formatting
library(ggplot2)   # for plotting graphs
library(tidyverse)
library(digest)   # creates hash values for data, which is essential for caching, data verification and ensuring reproducibility
library(COVID19)
# Creating the data frame to help me calculate the MAE, MSE & RMSE:
df <- data.frame(
date = predicted_data$date,
predicted = predicted_data$confirm,
observed = observed_data$confirm
) %>%
mutate(time = row_number())
# Reshaping the data frame for plotting:
df_long <- tidyr::pivot_longer(
df,
cols = c(predicted, observed),
names_to = "variable",
values_to = "value"
)
View(df_long)
ggplot(df_long, aes(x = time, y = value, color = variable)) +
geom_point() +
geom_line(ggplot2::aes(group = variable)) +
labs(title = "Predicted vs Observed Cases") +
theme_classic()
# Calculating the MAE, MSE & RMSE:
metrics <- df %>%
mutate(
error = observed - predicted,   # calculates the difference between the observed and predicted data
abs_error = abs(error),   # calculate the absolute error independently first for the MAE
squared_error = error^2   # calculate the squared error independently first for the MSE and RMSE
) %>%
summarise(
MAE = mean(abs_error),
MSE = mean(squared_error),
RMSE = sqrt(MSE)
)
View(metrics)
View(df)
View(observed_data)
View(metrics)
=======
ggplot2::ggplot(df, ggplot2::aes(x = predicted, y = observed)) +
ggplot2::geom_point() +
ggplot2::labs(title = "Predicted vs Observed",
x = "Predicted Values",
y = "Observed Values") +
ggplot2::theme_minimal()
df_long <- tidyr::pivot_longer(df, cols = everything(), names_to = "variable", values_to = "value")
df_long
df <- data.frame(predicted = runif(100),
observed = runif(100)
) %>%
mutate(time= seq(1, 100, by = 1)))
df <- data.frame(predicted = runif(100),
observed = runif(100)
) %>%
mutate(time= seq(1, 100, by = 1))
df
df_long <- tidyr::pivot_longer(df, cols = c(predicted, observed), names_to = "variable", values_to = "value")
df_long
ggplot2::ggplot(df_long, ggplot2::aes(x = time, y = value, color = variable)) +
ggplot2::geom_point() +
ggplot2::labs(title = "Predicted vs Observed") +
ggplot2::theme_minimal()
ggplot2::ggplot(df_long, ggplot2::aes(x = time, y = value, color = variable)) +
ggplot2::geom_point() +
ggplot2::labs(title = "Predicted vs Observed") +
ggplot2::theme_minimal()
df <- data.frame(predicted = runif(10),
observed = runif(10)
) %>%
mutate(time= seq(1, 10, by = 1))
df <- data.frame(predicted = runif(10),
observed = runif(10)
) %>%
mutate(time= seq(1, 10, by = 1))
df_long <- tidyr::pivot_longer(df, cols = c(predicted, observed), names_to = "variable", values_to = "value")
ggplot2::ggplot(df_long, ggplot2::aes(x = time, y = value, color = variable)) +
ggplot2::geom_point() +
ggplot2::labs(title = "Predicted vs Observed") +
ggplot2::theme_minimal()
ggplot2::ggplot(df_long, ggplot2::aes(x = time, y = value, color = variable)) +
ggplot2::geom_point() +
geom_line(ggplot2::aes(group = variable)) +
ggplot2::labs(title = "Predicted vs Observed") +
ggplot2::theme_minimal()
df %>%
mutate(error = predicted - observed,
abs_error= abs(error)
)
# Calculate MAE
metrics <- df %>%
mutate(error = predicted - observed,
abs_error= abs(error)
) %>%
summarise(MAE = mean(abs_error))
metrics
# Calculate MAE
metrics <- df %>%
mutate(error = predicted - observed,
abs_error= abs(error),
squared_error = error^2)
# Calculate MAE
metrics <- df %>%
mutate(error = predicted - observed,
abs_error= abs(error),
squared_error = (error^2)
) %>%
summarise(MAE = mean(abs_error),
MSE = mean(squared_error),
RMSE = sqrt(MSE)
)
metrics
df %>%
mutate(error = predicted - observed,
abs_error= abs(error),
squared_error = (error^2)
)
# Calculate MAE
metrics <- df %>%
mutate(error = predicted - observed,
abs_error= abs(error),
squared_error = (error^2)
) %>%
summarise(MAE = mean(abs_error),
MSE = mean(squared_error),
RMSE = sqrt(MSE)
)
metrics
library(tidyverse)
library(forecast)
#' Naïve Forecast
#'
#' Returns the last observed value as the forecast.
#'
#' @param y Numeric vector of historical counts.
#'
#' @return A single numeric value (length 1) representing the forecast.
naive_forecast <- function(y) {
tail(y, 1)
}
#' Seasonal Naïve Forecast
#'
#' Returns the value from the same season in the previous cycle.
#'
#' @param y Numeric vector of historical counts.
#' @param season_lag Integer, the seasonal lag (e.g., 52 for weekly data with annual seasonality).
#'
#' @return A single numeric value (length 1) representing the forecast.
seasonal_naive <- function(y, season_lag = 52) {
if (length(y) < season_lag) stop("Not enough data for seasonal naive")
y[length(y) - season_lag + 1]
}
#' Moving Average Forecast
#'
#' Returns the mean of the last \code{k} values as the forecast.
#'
#' @param y Numeric vector of historical counts.
#' @param k Integer, number of past observations to average.
#'
#' @return A single numeric value (length 1) representing the forecast.
moving_average <- function(y, k = 3) {
if (length(y) < k) stop("Not enough data for moving average")
mean(tail(y, k))
}
#' Simple Exponential Smoothing Forecast
#'
#' Applies simple exponential smoothing to forecast \code{h} steps ahead.
#'
#' @param y Numeric vector of historical counts.
#' @param h Integer, forecast horizon (default = 1).
#'
#' @return A single numeric value (length 1) representing the forecast for step \code{h}.
#'
#' @import forecast
ses_forecast <- function(y, h = 1) {
fit <- ses(y, h = h)
fit$mean[h]
}
#' Seasonal ETS Forecast
#'
#' Fits an exponential smoothing state space model and forecasts \code{h} steps ahead.
#'
#' @param y Numeric vector of historical counts.
#' @param h Integer, forecast horizon (default = 1).
#'
#' @return A single numeric value (length 1) representing the forecast for step \code{h}.
#'
#' @import forecast
ets_forecast <- function(y, h = 1) {
fit <- ets(y)
forecast(fit, h = h)$mean[h]
}
#' Poisson GLM Forecast
#'
#' Fits a Poisson GLM with time as a predictor and forecasts \code{h} steps ahead.
#'
#' @param y Numeric vector of historical counts.
#' @param h Integer, forecast horizon (default = 1).
#'
#' @return A single numeric value (length 1) representing the forecast.
glm_poisson_forecast <- function(y, h = 1) {
df <- data.frame(y = y, t = seq_along(y))
fit <- glm(y ~ t, family = poisson(), data = df)
predict(fit, newdata = data.frame(t = length(y) + h), type = "response")
}
#' Historical Average Forecast
#'
#' Returns the average of observations from the same season across previous cycles.
#'
#' @param y Numeric vector of historical counts.
#' @param season_lag Integer, seasonal lag (e.g., 52 for weekly data with yearly seasonality).
#'
#' @return A single numeric value (length 1) representing the forecast.
historical_average <- function(y, season_lag = 52) {
idxs <- seq(length(y), 1, by = -season_lag)
if (length(idxs) < 1) stop("Not enough data for historical average")
mean(y[idxs])
}
# Simulate data: seasonal + noise
set.seed(123)
dates <- seq.Date(as.Date("2020-01-01"), as.Date("2023-01-01"), by = "day")
n <- length(dates)
y <- round(20 + 10 * sin(2 * pi * (1:n) / 365) + rnorm(n, 0, 3))
names(y) <- dates
y
y
# Define forecast window
forecast_start <- as.Date("2021-01-01")
forecast_end <- as.Date("2022-12-31")
forecast_dates <- seq.Date(forecast_start, forecast_end, by = "day")
forecast_dates
dates
# Forecast function wrapper
run_forecast <- function(forecast_fun, ...) {
sapply(forecast_dates, function(d) {
idx <- which(dates < d)
y_hist <- y[idx]
tryCatch(forecast_fun(y_hist, ...), error = function(e) NA)
})
}
# Run all baseline forecasts
naive <- run_forecast(naive_forecast)
naive
naive %>% plot()
y %>% plot(type = "l")
plot(y, type = "l")
lines(naive, type = "l", col = "red")
seasonal_naive <- run_forecast(seasonal_naive, season_lag = 365)
lines(seasonal_naive, type = "l", col = "blue")
ma7 <- run_forecast(moving_average, k = 7)
ses <- run_forecast(ses_forecast, h = 1)
ets <- run_forecast(ets_forecast, h = 1)
glm <- run_forecast(glm_poisson_forecast, h = 1)
hist_avg <- run_forecast(historical_average, season_lag = 365)
lines(glm, type = "l", col = "green")
lines(ma7, type = "l", col = "violet")
# Actual observed values
actual <- y[as.character(forecast_dates)]
# Evaluate performance: MAE
mae <- function(pred, truth) mean(abs(pred - truth), na.rm = TRUE)
scores <- data.frame(
Model = c("Naive", "Seasonal Naive", "MA7", "SES", "ETS", "GLM-Poisson", "Historical Avg"),
MAE = c(
mae(naive, actual),
mae(seasonal_naive, actual),
mae(ma7, actual),
mae(ses, actual),
mae(ets, actual),
mae(glm, actual),
mae(hist_avg, actual)
)
)
print(scores)
y %>% head()
ma7 %>% head()
naive %>% head()
ses %>% head()
glm %>% head()
reported_cases <- read.csv("https://github.com/epiforecasts/covid-rt-estimates/blob/master/national/cases/summary/reported_cases.csv")
reported_cases
library(readr)
reported_cases <- read.csv("https://github.com/epiforecasts/covid-rt-estimates/blob/master/national/cases/summary/reported_cases.csv")
library(readr)
reported_cases <- read_csv("https://github.com/epiforecasts/covid-rt-estimates/blob/master/national/cases/summary/reported_cases.csv")
reported_cases
reported_cases %>% View()
reported_cases <- read_csv("~/Downloads/reported_cases.csv")
reported_cases
uk <- reported_cases %>%
filter(country == "United Kingdom") %>%
select(date, confirm)
uk <- reported_cases %>%
filter(region == "United Kingdom") %>%
select(date, confirm)
uk
uk_predicted <- cases_by_report %>%
filter(country == "United Kingdom") %>%
filter(type == "forecast")
predicted_cases <- read_csv("~/Downloads/cases_by_report.csv")
predicted_cases
uk_predicted <- predicted_cases %>%
filter(country == "United Kingdom") %>%
filter(type == "forecast")
uk_predicted
uk_observed
reported_cases <- read_csv("~/Downloads/reported_cases.csv")
uk_observed <- reported_cases %>%
filter(region == "United Kingdom") %>%
select(date, confirm)
uk_predicted <- predicted_cases %>%
filter(country == "United Kingdom") %>%
filter(type == "forecast")
uk_observed
range(uk_predicted$date)
uk_observed <- reported_cases %>%
filter(region == "United Kingdom") %>%
select(date, confirm) %>%
filter(date >= min(uk_predicted$date) & date <= max(uk_predicted$date))
uk_observed
uk_observed
uk_observed <- reported_cases %>%
filter(region == "United Kingdom") %>%
select(date, confirm)
uk_observed
range(uk_observed$date)
range(uk_predicted$date)
max(uk_predicted$date) - min(uk_predicted$date)
max(uk_observed$date) - min(uk_observed$date)
tail(uk_observed)
tail(uk_predicted)
tail(uk_predicted) %>% select(country, date)
tail(uk_observed)
tail(uk_predicted) %>% select(country, date)
library(ggplot2)
ggplot() +
geom_line(data = uk_observed, aes(x = date, y = confirm, color = "Observed"), size = 1) +
geom_line(data = uk_predicted, aes(x = date, y = mean, color = "Predicted"), size = 1) +
labs(title = "COVID-19 Cases in the United Kingdom",
x = "Date",
y = "Number of Cases",
color = "Legend") +
scale_color_manual(values = c("Predicted" = "blue", "Observed" = "red")) +
theme_minimal()
uk_predicted <- predicted_cases %>%
filter(country == "United Kingdom") %>%
filter(type !== "estimate")
uk_predicted <- predicted_cases %>%
filter(country == "United Kingdom") %>%
filter(type != "estimate")
uk_observed <- reported_cases %>%
filter(region == "United Kingdom") %>%
select(date, confirm)
ggplot() +
geom_line(data = uk_observed, aes(x = date, y = confirm, color = "Observed"), size = 1) +
geom_line(data = uk_predicted, aes(x = date, y = mean, color = "Predicted"), size = 1) +
labs(title = "COVID-19 Cases in the United Kingdom",
x = "Date",
y = "Number of Cases",
color = "Legend") +
scale_color_manual(values = c("Predicted" = "blue", "Observed" = "red")) +
theme_minimal()
ggplot() +
geom_line(data = uk_observed, aes(x = date, y = confirm, color = "Observed"), size = 1) +
geom_line(data = uk_predicted, aes(x = date, y = median, color = "Predicted"), size = 1) +
labs(title = "COVID-19 Cases in the United Kingdom",
x = "Date",
y = "Number of Cases",
color = "Legend") +
scale_color_manual(values = c("Predicted" = "blue", "Observed" = "red")) +
theme_minimal()
ggplot() +
geom_line(data = uk_observed, aes(x = date, y = confirm, color = "Observed"), size = 1) +
geom_line(data = uk_predicted, aes(x = date, y = median, color = "Predicted"), size = 1) +
labs(title = "COVID-19 Cases in the United Kingdom",
x = "Date",
y = "Number of Cases",
color = "Legend") +
scale_color_manual(values = c("Predicted" = "blue", "Observed" = "red")) +
theme_minimal()
tail(uk_predicted)
tail(uk_predicted) %>% select(country, date, mean())
tail(uk_predicted) %>% select(country, date, mean)
?COVID19::covid19()
library(COVID19)
tail(predicted_cases, 1)$date)
tail(predicted_cases, 1)$date
as.Date(tail(predicted_cases, 1)$date)
# Using vintage data
reported_cases <- COVID19::covid19(country = "united kingdom", vintage = as.Date(tail(predicted_cases, 1)$date))
install.packages('RSQLite')
# Using vintage data
reported_cases <- COVID19::covid19(country = "united kingdom", vintage = as.Date(tail(predicted_cases, 1)$date))
reported_cases
# Using vintage data
reported_cases_vintage <- COVID19::covid19(country = "united kingdom", vintage = as.Date(tail(predicted_cases, 1)$date))
reported_cases_vintage <- reported_cases_vintage %>%
select(date, confirmed)
reported_cases_vintage
reported_cases_vintage
# Using vintage data
reported_cases_vintage <- COVID19::covid19(country = "United Kingdom", vintage = as.Date(tail(predicted_cases, 1)$date))
reported_cases_vintage
# Using vintage data
reported_cases_vintage <- COVID19::covid19(country = "United Kingdom", vintage = as.Date(tail(predicted_cases, 1)$date))
reported_cases_vintage <- reported_cases_vintage %>%
select(date, confirmed)
reported_cases_vintage
uk_observed_incidence <- reported_cases_vintage %>%
filter(region == "United Kingdom") %>%
rowwise() %>%
mutate(confirm = confirmed - lag(confirmed, default = 0)) %>%
uk_predicted <- predicted_cases %>%
filter(country == "United Kingdom") %>%
filter(type == "forecast")
uk_observed_incidence <- reported_cases_vintage %>%
filter(region == "United Kingdom") %>%
rowwise() %>%
mutate(confirm = confirmed - lag(confirmed, default = 0))
uk_observed_incidence <- reported_cases_vintage %>%
rowwise() %>%
mutate(confirm = confirmed - lag(confirmed, default = 0))
uk_observed_incidence
uk_observed_incidence <- reported_cases_vintage %>%
rowwise() %>%
transmute(confirm = confirmed - lag(confirmed, default = 0))
uk_observed_incidence
uk_observed_incidence <- reported_cases_vintage %>%
rowwise() %>%
mutate(confirm = confirmed - lag(confirmed, default = 0))
uk_observed_incidence
uk_observed_incidence <- reported_cases_vintage %>%
rename(cumulative = confirmed) %>%
mutate(incidence = cumulative - lag(cumulative, default = 0)) %>%
uk_predicted <- predicted_cases %>%
filter(country == "United Kingdom") %>%
filter(type == "forecast")
uk_observed_incidence <- reported_cases_vintage %>%
rename(cumulative = confirmed) %>%
mutate(incidence = cumulative - lag(cumulative, default = 0))
uk_observed_incidence
uk_observed <- reported_cases_vintage %>%
rename(cumulative = confirmed) %>%
mutate(incidence = cumulative - lag(cumulative, default = 0))
ggplot() +
geom_line(data = uk_observed, aes(x = date, y = confirm, color = "Observed"), size = 1) +
geom_line(data = uk_predicted, aes(x = date, y = median, color = "Predicted"), size = 1) +
labs(title = "COVID-19 Cases in the United Kingdom",
x = "Date",
y = "Number of Cases",
color = "Legend") +
scale_color_manual(values = c("Predicted" = "blue", "Observed" = "red")) +
theme_minimal()
ggplot() +
geom_line(data = uk_observed, aes(x = date, y = incidence, color = "Observed"), size = 1) +
geom_line(data = uk_predicted, aes(x = date, y = median, color = "Predicted"), size = 1) +
labs(title = "COVID-19 Cases in the United Kingdom",
x = "Date",
y = "Number of Cases",
color = "Legend") +
scale_color_manual(values = c("Predicted" = "blue", "Observed" = "red")) +
theme_minimal()
predicted_cases
predicted_cases <- read_csv("~/Downloads/cases_by_report.csv") %>%
filter(region == "United Kingdom")
predicted_cases <- read_csv("~/Downloads/cases_by_report.csv") %>%
filter(country == "United Kingdom")
predicted_cases
reported_cases_vintage <- reported_cases_vintage %>%
select(date, confirmed)
uk_observed <- reported_cases_vintage %>%
rename(cumulative = confirmed) %>%
mutate(incidence = cumulative - lag(cumulative, default = 0))
# Using vintage data
reported_cases_vintage <- COVID19::covid19(country = "United Kingdom", vintage = as.Date(tail(predicted_cases, 1)$date))
reported_cases_vintage <- reported_cases_vintage %>%
select(date, confirmed)
uk_observed <- reported_cases_vintage %>%
rename(cumulative = confirmed) %>%
mutate(incidence = cumulative - lag(cumulative, default = 0))
uk_predicted <- predicted_cases %>%
filter(country == "United Kingdom") %>%
filter(type == "forecast")
#reported_cases <- read_csv("~/Downloads/reported_cases.csv")
uk_predicted <- read_csv("~/Downloads/cases_by_report.csv") %>%
filter(country == "United Kingdom") %>%
filter(type == "forecast")
uk_observed <- COVID19::covid19(country = "United Kingdom", vintage = as.Date(tail(predicted_cases, 1)$date)) %>%
select(date, confirmed) %>%
rename(cumulative = confirmed) %>%
mutate(incidence = cumulative - lag(cumulative, default = 0))
# Using vintage data
uk_observed <- COVID19::covid19(country = "United Kingdom", vintage = as.Date(tail(predicted_cases, 1)$date)) %>%
select(date, confirmed) %>%
rename(cumulative = confirmed) %>%
mutate(incidence = cumulative - lag(cumulative, default = 0))
# Using vintage data
uk_observed <- COVID19::covid19(country = "United Kingdom", vintage = as.Date(tail(predicted_cases, 1)$date)) %>%
select(date, confirmed) %>%
rename(cumulative = confirmed) %>%
mutate(incidence = cumulative - lag(cumulative, default = 0))
ggplot() +
geom_line(data = uk_observed, aes(x = date, y = incidence, color = "Observed"), size = 1) +
geom_line(data = uk_predicted, aes(x = date, y = median, color = "Predicted"), size = 1) +
labs(title = "COVID-19 Cases in the United Kingdom",
x = "Date",
y = "Number of Cases",
color = "Legend") +
scale_color_manual(values = c("Predicted" = "blue", "Observed" = "red")) +
theme_minimal()
uk_observed
# Using vintage data
uk_observed <- COVID19::covid19(country = "United Kingdom", vintage = as.Date(tail(uk_predicted, 1)$date)) %>%
select(date, confirmed) %>%
rename(cumulative = confirmed) %>%
mutate(incidence = cumulative - lag(cumulative, default = 0))
uk_observed
ggplot() +
geom_line(data = uk_observed, aes(x = date, y = incidence, color = "Observed"), size = 1) +
geom_line(data = uk_predicted, aes(x = date, y = median, color = "Predicted"), size = 1) +
labs(title = "COVID-19 Cases in the United Kingdom",
x = "Date",
y = "Number of Cases",
color = "Legend") +
scale_color_manual(values = c("Predicted" = "blue", "Observed" = "red")) +
theme_minimal()
#reported_cases <- read_csv("~/Downloads/reported_cases.csv")
uk_predicted <- read_csv("~/Downloads/cases_by_report.csv") %>%
filter(country == "United Kingdom") %>%
filter(type == "forecast")
# Using vintage data
uk_observed <- COVID19::covid19(country = "United Kingdom", vintage = as.Date(tail(uk_predicted, 1)$date)) %>%
select(date, confirmed) %>%
rename(cumulative = confirmed) %>%
mutate(incidence = cumulative - lag(cumulative, default = 0))
uk_observed
ggplot() +
geom_line(data = uk_observed, aes(x = date, y = incidence, color = "Observed"), size = 1) +
geom_line(data = uk_predicted, aes(x = date, y = median, color = "Predicted"), size = 1) +
labs(title = "COVID-19 Cases in the United Kingdom",
x = "Date",
y = "Number of Cases",
color = "Legend") +
scale_color_manual(values = c("Predicted" = "blue", "Observed" = "red")) +
theme_minimal()
as.Date(tail(uk_predicted, 1)$date)
as.Date(tail(uk_observed, 1)$date)
as.Date(head(uk_observed, 1)$date)
uk_observed
uk_observed %>% tail()
tail(uk_predicted, 1)$date
install.packages("covidHubUtils")
R.version
>>>>>>> Stashed changes
