library(covidregionaldata)
library(dplyr)   # for data manipulation (e.g. aggregating data)
library(scales)   # better date formatting
library(ggplot2)   # for plotting graphs
library(digest)   # creates hash values for data, which is essential for caching, data verification and ensuring reproducibility
setwd("C:/Users/OlamideAdenuga/Desktop/COVID-19 Forecasts Internship Project/HDR-UK-BIP-Covid19-Project")
getwd()
predicted_data = read.csv("predicted_cases.csv")
predicted_data <- predicted_data %>%
filter(region == "United Kingdom")   # filters the data for where the region is United Kingdom
predicted_data$date <- as.Date(predicted_data$date)    # converts the date (column) variable into an actual Date (class) format
predicted_data$region <- NULL   # region variable (column) is redundant and so can be removed using NULL
predicted_data <- predicted_data[, c("date", "confirm")]   # allows me to extract only the 2 variables (columns) that I needed from the data
View(predicted_data)
library(dplyr)   # for data manipulation (e.g. aggregating data)
library(scales)   # better date formatting
library(ggplot2)   # for plotting graphs
library(digest)   # creates hash values for data, which is essential for caching, data verification and ensuring reproducibility
library(COVID19)
setwd("C:/Users/OlamideAdenuga/Desktop/evaluating_covid_19_forecasts_internship_project/hdr_uk_bip_covid_19_project")
getwd()
predicted_data = read.csv("predicted_cases.csv")
predicted_data <- predicted_data %>%
filter(region == "United Kingdom")   # filters the data for where the region is United Kingdom
predicted_data$date <- as.Date(predicted_data$date)    # converts the date (column) variable into an actual Date (class) format
predicted_data$region <- NULL   # region variable (column) is redundant and so can be removed using NULL
predicted_data <- predicted_data[, c("date", "confirm")]
observed_data <- covid19(country = "United Kingdom", level = 1, start = "2022-03-04", end = "2022-06-24")
observed_data$date <- as.Date(observed_data$date)    # converts the date (column) variable into an actual Date (class) format
observed_data <- observed_data[, c("date", "confirmed")]   # allows me to extract only the 2 variables (columns) that I needed from the data
observed_data <- observed_data %>%
rename(confirm = confirmed)
install.packages("tidyverse")
View(observed_data)
View(predicted_data)
df <- data.frame(
date = predicted_data$date,
predicted = predicted_data$confirm,
observed = observed_data$confirm
) %>%
mutate(time = row_number())
library(dplyr)   # for data manipulation (e.g. aggregating data)
library(scales)   # better date formatting
library(ggplot2)   # for plotting graphs
library(tidyverse)
library(digest)   # creates hash values for data, which is essential for caching, data verification and ensuring reproducibility
library(COVID19)
library(dplyr)   # for data manipulation (e.g. aggregating data)
library(scales)   # better date formatting
library(ggplot2)   # for plotting graphs
library(tidyverse)
library(digest)   # creates hash values for data, which is essential for caching, data verification and ensuring reproducibility
library(COVID19)
library(dplyr)   # for data manipulation (e.g. aggregating data)
library(scales)   # better date formatting
library(ggplot2)   # for plotting graphs
library(tidyverse)
library(digest)   # creates hash values for data, which is essential for caching, data verification and ensuring reproducibility
library(COVID19)
# Creating the data frame to help me calculate the MAE, MSE & RMSE:
df <- data.frame(
date = predicted_data$date,
predicted = predicted_data$confirm,
observed = observed_data$confirm
) %>%
mutate(time = row_number())
# Reshaping the data frame for plotting:
df_long <- tidyr::pivot_longer(
df,
cols = c(predicted, observed),
names_to = "variable",
values_to = "value"
)
View(df_long)
ggplot(df_long, aes(x = time, y = value, color = variable)) +
geom_point() +
geom_line(ggplot2::aes(group = variable)) +
labs(title = "Predicted vs Observed Cases") +
theme_classic()
# Calculating the MAE, MSE & RMSE:
metrics <- df %>%
mutate(
error = observed - predicted,   # calculates the difference between the observed and predicted data
abs_error = abs(error),   # calculate the absolute error independently first for the MAE
squared_error = error^2   # calculate the squared error independently first for the MSE and RMSE
) %>%
summarise(
MAE = mean(abs_error),
MSE = mean(squared_error),
RMSE = sqrt(MSE)
)
View(metrics)
View(df)
View(observed_data)
View(metrics)
knitr::opts_chunk$set(echo = TRUE, warning = FALSE, message = FALSE)
library(tidyverse)
uk_observed <- readRDS("data/uk_observed.rds")
library(scales)   # better date formatting
library(tidyverse)
library(digest)
library(scales)   # better date formatting
library(tidyverse)
uk_observed <- readRDS("data/uk_observed.rds")
uk_prediction_baseline <- readRDS("data/uk_prediction_baseline.rds")
uk_prediction_epiforecasts <- readRDS("data/uk_prediction_epiforecasts.rds")
View(uk_observed)
View(uk_prediction_baseline)
View(uk_prediction_epiforecasts)
observed_data <- uk_observed %>%
mutate(date = as.Date(date)) %>%
rename(observed = incidence) %>%
select(date, observed)
baseline_data <- uk_prediction_baseline %>%
mutate(date = as.Date(date),
issue_date = as.Date(issue_date)) %>%
select(date, horizon, baseline_pred = prediction)
epiforecasts_data <- uk_prediction_epiforecasts %>%
filter(name == "median") %>%  # keep only median predictions
mutate(date = as.Date(date)) %>%
select(date, horizon, epiforecasts_pred = prediction)
paired <- epiforecasts_data %>%
inner_join(baseline_data, by = c("date","horizon")) %>%  # keep only common targets
left_join(obs, by = "date") %>%                     # attach observations
filter(!is.na(observed_data))                             # ensure we can evaluate
paired <- epiforecasts_data %>%
inner_join(baseline_data, by = c("date","horizon")) %>%  # keep only common targets
left_join(observed_data, by = "date") %>%                     # attach observations
filter(!is.na(observed_data))
knitr::opts_chunk$set(echo = TRUE, warning = FALSE, message = FALSE)
library(tidyverse)
uk_observed <- readRDS("data/uk_observed.rds")
View(observed_data)
paired <- epiforecasts_data %>%
inner_join(baseline_data, by = c("date","horizon")) %>%  # keep only common targets
left_join(observed_data, by = "date") %>%                     # attach observations
filter(!is.na(observed))
epinow2_forecast_vs_data_one_horizon <- ggplot(paired %>% filter(horizon == 5), aes(date)) +
geom_line(aes(y = observed_data, color = "Observed"), size = 0.4) +
geom_line(aes(y = epiforecasts_data, color = "Epiforecasts"), size = 0.4) +
scale_y_continuous(labels = scales::comma) +
labs(title = "Forecasts vs Observed (1 Horizon)",
x = "Date", y = "Incidence",
color = "Legend") +
theme_minimal()
epinow2_forecast_vs_data_one_horizon
epinow2_forecast_vs_data_one_horizon <- ggplot(paired %>% filter(horizon == 5), aes(date)) +
geom_line(aes(y = observed_data, color = "Observed"), linewidth = 0.4) +
geom_line(aes(y = epiforecasts_data, color = "Epiforecasts"), linewidth = 0.4) +
scale_y_continuous(labels = scales::comma) +
labs(title = "Forecasts vs Observed (1 Horizon)",
x = "Date", y = "Incidence",
color = "Legend") +
theme_minimal()
epinow2_forecast_vs_data_one_horizon
View(epiforecasts_data)
View(observed_data)
View(baseline_data)
epinow2_forecast_vs_data_one_horizon <- ggplot(paired %>% filter(horizon == 5), aes(date)) +
geom_line(aes(y = observed, color = "Observed"), linewidth = 0.4) +
geom_line(aes(y = epiforecasts_pred, color = "Epiforecast"), linewidth = 0.4) +
scale_y_continuous(labels = scales::comma) +
labs(title = "Forecasts vs Observed (1 Horizon)",
x = "Date", y = "Incidence",
color = "Legend") +
theme_minimal()
epinow2_forecast_vs_data_one_horizon <- ggplot(paired %>% filter(horizon == 5), aes(date)) +
geom_line(aes(y = observed, color = "Observed"), linewidth = 0.4) +
geom_line(aes(y = epiforecasts_pred, color = "Epiforecast"), linewidth = 0.4) +
scale_y_continuous(labels = scales::comma) +
labs(title = "Forecasts vs Observed (1 Horizon)",
x = "Date", y = "Incidence",
color = "Legend") +
theme_minimal()
epinow2_forecast_vs_data_one_horizon
forecasts_by_horizon <- ggplot(paired, aes(date)) +
geom_line(aes(y = observed, color = "Observed"), linewidth = 0.4) +
geom_line(aes(y = epiforecasts_pred, color = "Epiforecast"), linewidth = 0.2) +
geom_line(aes(y = baseline_pred, color = "Baseline"), linewidth = 0.2) +
scale_y_continuous(labels = scales::comma) +
facet_wrap(~ horizon, scales = "free_y") +
labs(title = "Forecasts vs Observed by Horizon",
x = "Date", y = "Incidence",
color = "Legend") +
theme_minimal()
forecasts_by_horizon
eval_df <- paired %>%
mutate(
err_epiforecasts  = epiforecasts_pred  - observed,
err_base = baseline_pred - observed,
ae_epiforecasts   = abs(err_epiforecasts),
ae_base  = abs(err_base)
)
metrics <- eval_df %>%
group_by(horizon) %>%
summarise(
n            = n(),
mae_epiforecasts      = mean(ae_epiforecasts,  na.rm = TRUE),
mae_baseline = mean(ae_base, na.rm = TRUE),
score        = 1 - mae_epiforecasts / mae_baseline,
.groups = "drop"
) %>%
arrange(horizon)
metrics
p_mae <- metrics %>%
select(horizon, mae_epiforecasts, mae_baseline) %>%
pivot_longer(-horizon, names_to = "model", values_to = "mae") %>%
ggplot(aes(horizon, mae, color = model)) +
geom_line() +
geom_point() +
scale_x_continuous(breaks = seq(1, 14, 1)) +
labs(x = "Horizon (days ahead)", y = "MAE",
title = "MAE by horizon: epiforecasts vs baseline") +
theme_minimal()
p_mae
p_score <- ggplot(metrics, aes(horizon, score)) +
geom_hline(yintercept = 0, linetype = 2) +
geom_line() +
geom_point() +
scale_x_continuous(breaks = seq(1, 14, 1)) +
labs(x = "Horizon (days ahead)",
y = "Model score: 1 - MAE_epiforecasts / MAE_base",
title = "Relative skill vs baseline by horizon") +
theme_minimal()
p_score
epinow2_forecast_vs_data_one_horizon <- ggplot(paired %>% filter(horizon == 5), aes(date)) +
geom_line(aes(y = observed, color = "Observed"), linewidth = 0.4) +
geom_line(aes(y = epiforecasts_pred, color = "Epiforecast"), linewidth = 0.4) +
scale_y_continuous(labels = scales::comma) +
labs(title = "Forecasts vs Observed (1 Horizon)",
x = "Date", y = "Incidence",
color = "Legend") +
theme_minimal()
epinow2_forecast_vs_data_one_horizon
epinow2_forecast_vs_data_one_horizon <- ggplot(paired %>% filter(horizon == 5), aes(date)) +
geom_line(aes(y = observed, color = "Observed"), linewidth = 0.4) +
geom_line(aes(y = epiforecasts_pred, color = "Epiforecast"), linewidth = 0.4) +
scale_y_continuous(labels = scales::comma) +
labs(title = "Forecast vs Observed",   # this is just for one horizon
x = "Date", y = "Number of Cases",
color = "Legend") +
theme_minimal()
epinow2_forecast_vs_data_one_horizon
epinow2_forecast_vs_data_one_horizon <- ggplot(paired %>% filter(horizon == 5), aes(date)) +
geom_line(aes(y = observed, color = "Observed"), linewidth = 0.4) +
geom_line(aes(y = epiforecasts_pred, color = "Epiforecast"), linewidth = 0.4) +
scale_y_continuous(labels = scales::comma) +
scale_color_manual(values = c("Observed" = "blue", "Epiforecast" = "grey")) +
labs(title = "Forecast vs Observed",   # this is just for one horizon
x = "Date", y = "Number of Cases",
color = "Legend") +
theme_minimal()
epinow2_forecast_vs_data_one_horizon
colors()
epinow2_forecast_vs_data_one_horizon <- ggplot(paired %>% filter(horizon == 5), aes(date)) +
geom_line(aes(y = observed, color = "Observed"), linewidth = 0.4) +
geom_line(aes(y = epiforecasts_pred, color = "Epiforecast"), linewidth = 0.4) +
scale_y_continuous(labels = scales::comma) +
scale_color_manual(values = c("Observed" = "deepskyblue", "Epiforecast" = "darkgrey")) +
labs(title = "Forecast vs Observed",   # this is just for one horizon
x = "Date", y = "Number of Cases",
color = "Legend") +
theme_minimal()
epinow2_forecast_vs_data_one_horizon
epinow2_forecast_vs_data_one_horizon <- ggplot(paired %>% filter(horizon == 5), aes(date)) +
geom_line(aes(y = observed, color = "Observed"), linewidth = 0.4) +
geom_line(aes(y = epiforecasts_pred, color = "Epiforecast"), linewidth = 0.4) +
scale_y_continuous(labels = scales::comma) +
scale_color_manual(values = c("Observed" = "deepskyblue", "Epiforecast" = "grey20")) +
labs(title = "Forecast vs Observed",   # this is just for one horizon
x = "Date", y = "Number of Cases",
color = "Legend") +
theme_minimal()
epinow2_forecast_vs_data_one_horizon
epinow2_forecast_vs_data_one_horizon <- ggplot(paired %>% filter(horizon == 5), aes(date)) +
geom_line(aes(y = observed, color = "Observed"), linewidth = 0.4) +
geom_line(aes(y = epiforecasts_pred, color = "Epiforecast"), linewidth = 0.4) +
scale_y_continuous(labels = scales::comma) +
scale_color_manual(values = c("Observed" = "deepskyblue", "Epiforecast" = "grey30")) +
labs(title = "Forecast vs Observed",   # this is just for one horizon
x = "Date", y = "Number of Cases",
color = "Legend") +
theme_minimal()
epinow2_forecast_vs_data_one_horizon
