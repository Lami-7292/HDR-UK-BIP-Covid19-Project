library(covidregionaldata)
library(dplyr)   # for data manipulation (e.g. aggregating data)
library(scales)   # better date formatting
library(ggplot2)   # for plotting graphs
library(digest)   # creates hash values for data, which is essential for caching, data verification and ensuring reproducibility
setwd("C:/Users/OlamideAdenuga/Desktop/COVID-19 Forecasts Internship Project/HDR-UK-BIP-Covid19-Project")
getwd()
predicted_data = read.csv("predicted_cases.csv")
predicted_data <- predicted_data %>%
filter(region == "United Kingdom")   # filters the data for where the region is United Kingdom
predicted_data$date <- as.Date(predicted_data$date)    # converts the date (column) variable into an actual Date (class) format
predicted_data$region <- NULL   # region variable (column) is redundant and so can be removed using NULL
predicted_data <- predicted_data[, c("date", "confirm")]   # allows me to extract only the 2 variables (columns) that I needed from the data
View(predicted_data)
library(dplyr)   # for data manipulation (e.g. aggregating data)
library(scales)   # better date formatting
library(ggplot2)   # for plotting graphs
library(digest)   # creates hash values for data, which is essential for caching, data verification and ensuring reproducibility
library(COVID19)
setwd("C:/Users/OlamideAdenuga/Desktop/evaluating_covid_19_forecasts_internship_project/hdr_uk_bip_covid_19_project")
getwd()
predicted_data = read.csv("predicted_cases.csv")
predicted_data <- predicted_data %>%
filter(region == "United Kingdom")   # filters the data for where the region is United Kingdom
predicted_data$date <- as.Date(predicted_data$date)    # converts the date (column) variable into an actual Date (class) format
predicted_data$region <- NULL   # region variable (column) is redundant and so can be removed using NULL
predicted_data <- predicted_data[, c("date", "confirm")]
observed_data <- covid19(country = "United Kingdom", level = 1, start = "2022-03-04", end = "2022-06-24")
observed_data$date <- as.Date(observed_data$date)    # converts the date (column) variable into an actual Date (class) format
observed_data <- observed_data[, c("date", "confirmed")]   # allows me to extract only the 2 variables (columns) that I needed from the data
observed_data <- observed_data %>%
rename(confirm = confirmed)
install.packages("tidyverse")
View(observed_data)
View(predicted_data)
df <- data.frame(
date = predicted_data$date,
predicted = predicted_data$confirm,
observed = observed_data$confirm
) %>%
mutate(time = row_number())
library(dplyr)   # for data manipulation (e.g. aggregating data)
library(scales)   # better date formatting
library(ggplot2)   # for plotting graphs
library(tidyverse)
library(digest)   # creates hash values for data, which is essential for caching, data verification and ensuring reproducibility
library(COVID19)
library(dplyr)   # for data manipulation (e.g. aggregating data)
library(scales)   # better date formatting
library(ggplot2)   # for plotting graphs
library(tidyverse)
library(digest)   # creates hash values for data, which is essential for caching, data verification and ensuring reproducibility
library(COVID19)
library(dplyr)   # for data manipulation (e.g. aggregating data)
library(scales)   # better date formatting
library(ggplot2)   # for plotting graphs
library(tidyverse)
library(digest)   # creates hash values for data, which is essential for caching, data verification and ensuring reproducibility
library(COVID19)
# Creating the data frame to help me calculate the MAE, MSE & RMSE:
df <- data.frame(
date = predicted_data$date,
predicted = predicted_data$confirm,
observed = observed_data$confirm
) %>%
mutate(time = row_number())
# Reshaping the data frame for plotting:
df_long <- tidyr::pivot_longer(
df,
cols = c(predicted, observed),
names_to = "variable",
values_to = "value"
)
View(df_long)
ggplot(df_long, aes(x = time, y = value, color = variable)) +
geom_point() +
geom_line(ggplot2::aes(group = variable)) +
labs(title = "Predicted vs Observed Cases") +
theme_classic()
# Calculating the MAE, MSE & RMSE:
metrics <- df %>%
mutate(
error = observed - predicted,   # calculates the difference between the observed and predicted data
abs_error = abs(error),   # calculate the absolute error independently first for the MAE
squared_error = error^2   # calculate the squared error independently first for the MSE and RMSE
) %>%
summarise(
MAE = mean(abs_error),
MSE = mean(squared_error),
RMSE = sqrt(MSE)
)
View(metrics)
View(df)
View(observed_data)
View(metrics)
