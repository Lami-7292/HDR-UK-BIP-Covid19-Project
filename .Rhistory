library(covidregionaldata)
library(dplyr)   # for data manipulation (e.g. aggregating data)
library(scales)   # better date formatting
library(ggplot2)   # for plotting graphs
library(digest)   # creates hash values for data, which is essential for caching, data verification and ensuring reproducibility
predicted_data <- predicted_data[, c("date", "confirm")]   # allows me to extract only the 2 variables (columns) that I needed from the data
setwd("C:/Users/OlamideAdenuga/Desktop/COVID-19 Forecasts Internship Project/HDR-UK-BIP-Covid19-Project")
getwd()
predicted_data = read.csv("predicted_cases.csv")
predicted_data <- predicted_data %>%
filter(region == "United Kingdom")   # filters the data for where the region is United Kingdom
predicted_data$date <- as.Date(predicted_data$date)    # converts the date (column) variable into an actual Date (class) format
predicted_data$region <- NULL   # region variable (column) is redundant and so can be removed using NULL
predicted_data <- predicted_data[, c("date", "confirm")]   # allows me to extract only the 2 variables (columns) that I needed from the data
ggplot(predicted_data, aes(x = date, y = confirm)) +
geom_line(color = "slateblue", linewidth = 0.5) +   #linewidth dictates the size or 'thickness' of the line on the plot
scale_x_date(date_labels = "%B %Y") +
# modifies the x-axis to add month and year, not just have the month: %B = full month name and %Y = 4-digit year
scale_y_continuous(labels = comma) +   # modifies y-axis to make it more readable (e.g. from 2e+05 to 200,000) to show the actual integer
labs(title = "Predicted COVID-19 Cases in The United Kingdom",
x = "Date",
y = "Number of Predicted Cases") +
theme_classic()
range(predicted_data$date, na.rm = TRUE)
install.packages("COVID19")
library("COVID19")
observed_data <- covid19(country = "United Kingdom", level = 1, start = "2022-03-04", end = "2022-06-24")
observed_data$date <- as.Date(observed_data$date)    # converts the date (column) variable into an actual Date (class) format
observed_data <- observed_data[, c("date", "confirmed")]   # allows me to extract only the 2 variables (columns) that I needed from the data
observed_data <- observed_data %>%
rename(confirm = confirmed)
plot(observed_data)   # the output was a cumulative plot
View(observed_data)
View(predicted_data)
range(observed_data$date, na.rm = TRUE)
range(predicted_data$date, na.rm = TRUE)
observed_data <- observed_data %>%
select(date, confirm) %>%
arrange(date) %>%
mutate(confirm = confirm - lag(confirm)) %>%
filter(!is.na(confirm))
plot(observed_data)
ggplot(observed_data, aes(x = date, y = confirm)) +
geom_line(color = "orange", linewidth = 0.5) +
scale_x_date(date_labels = "%B %Y") +
scale_y_continuous(labels = comma) +
labs(
title = "Observed COVID-19 Cases in The United Kingdom",
x = "Date",
y = "Number of Observed Cases"
) +
theme_classic()
View(observed_data)
View(predicted_data)
View(observed_data)
View(observed_data)
View(predicted_data)
observed_data <- observed_data %>%
select(date, confirm) %>%
arrange(date) %>%
mutate(confirm = confirm - lag(confirm)) %>%
mutate(confirm = ifelse(is.na(confirm), 0, confirm)) %>%   # replaces any NA values with 0
plot(observed_data)
observed_data <- observed_data %>%
select(date, confirm) %>%
arrange(date) %>%
mutate(confirm = confirm - lag(confirm)) %>%
mutate(confirm = ifelse(is.na(confirm), 0, confirm)) %>%   # replaces any NA values with 0
filter(!is.na(confirm))
observed_data <- observed_data %>%
arrange(date) %>%
mutate(confirm = confirm - lag(confirm)) %>%
mutate(confirm = ifelse(is.na(confirm), 0, confirm)) %>%   # replaces any NA values with 0
select(date, confirm) %>%
plot(observed_data)
observed_data <- observed_data %>%
arrange(date) %>%
mutate(confirm = confirm - lag(confirm)) %>%
mutate(confirm = ifelse(is.na(confirm), 0, confirm)) %>%   # replaces any NA values with 0
select(date, confirm) %>%
plot(observed_data)
observed_data <- observed_data %>%
arrange(date) %>%
mutate(confirm = confirm - lag(confirm)) %>%
mutate(confirm = ifelse(is.na(confirm), 0, confirm)) %>%   # replaces any NA values with 0
select(date, confirm) %>%
ggplot(observed_data, aes(x = date, y = confirm)) +
geom_line(color = "orange", linewidth = 0.5) +
scale_x_date(date_labels = "%B %Y") +
scale_y_continuous(labels = comma) +
labs(
title = "Observed COVID-19 Cases in The United Kingdom",
x = "Date",
y = "Number of Observed Cases"
) +
theme_classic()
observed_data <- observed_data %>%
arrange(date) %>%
mutate(confirm = confirm - lag(confirm)) %>%
mutate(confirm = ifelse(is.na(confirm), 0, confirm)) %>%   # replaces any NA values with 0
select(date, confirm)
install.packages("COVID19")
library("COVID19")
observed_data <- covid19(country = "United Kingdom", level = 1, start = "2022-03-04", end = "2022-06-24")
observed_data$date <- as.Date(observed_data$date)    # converts the date (column) variable into an actual Date (class) format
observed_data <- observed_data[, c("date", "confirmed")]   # allows me to extract only the 2 variables (columns) that I needed from the data
observed_data <- observed_data %>%
rename(confirm = confirmed)
plot(observed_data)
library(dplyr)   # for data manipulation (e.g. aggregating data)
library(scales)   # better date formatting
library(ggplot2)   # for plotting graphs
library(digest)
observed_data <- observed_data %>%
arrange(date) %>%
mutate(confirm = confirm - lag(confirm)) %>%
mutate(confirm = ifelse(is.na(confirm), 0, confirm)) %>%   # replaces any NA values with 0
select(date, confirm)
ggplot(observed_data, aes(x = date, y = confirm)) +
geom_line(color = "orange", linewidth = 0.5) +
scale_x_date(date_labels = "%B %Y") +
scale_y_continuous(labels = comma) +
labs(
title = "Observed COVID-19 Cases in The United Kingdom",
x = "Date",
y = "Number of Observed Cases"
) +
theme_classic()
range(observed_data$date, na.rm = TRUE)
range(predicted_data$date, na.rm = TRUE)
View(observed_data)
predicted_data <- predicted_data %>% select(date, confirm)
observed_data <- observed_data %>% select(date, confirm)
predicted_data$source <- "Predicted"
observed_data$source <- "Observed"
combined_data <- bind_rows(predicted_data, observed_data)
ggplot(combined_data, aes(x = date, y = confirm, color = source)) +
geom_line(linewidth = 1) +
scale_color_manual(values = c("Predicted" = "slateblue", "Observed" = "red")) +
scale_x_date(date_labels = "%B %Y" ) +
scale_y_continuous(labels = comma) +
labs(title = "A Comparison of Predicted and Observed COVID-19 Cases In The UK",
x = "Date",
y = "Number of Cases",
color = "Case Category") +
theme_classic() +
theme(legend.position = "top")
View(combined_data)
range(observed_data$date, na.rm = TRUE)
range(predicted_data$date, na.rm = TRUE)
predicted_data <- predicted_data %>% select(date, confirm)
observed_data <- observed_data %>% select(date, confirm)
predicted_data$source <- "Predicted"
observed_data$source <- "Observed"
combined_data <- bind_rows(predicted_data, observed_data)
ggplot(combined_data, aes(x = date, y = confirm, color = source)) +
geom_line(linewidth = 1) +
scale_color_manual(values = c("Predicted" = "slateblue", "Observed" = "red")) +
scale_x_date(date_labels = "%B %Y" ) +
scale_y_continuous(labels = comma) +
labs(title = "A Comparison of Predicted and Observed COVID-19 Cases In The UK",
x = "Date",
y = "Number of Cases",
color = "Type of Case") +
theme_classic() +
theme(legend.position = "top")
ggplot(combined_data, aes(x = date, y = confirm, color = source)) +
geom_line(linewidth = 1) +
scale_color_manual(values = c("Predicted" = "slateblue", "Observed" = "red")) +
scale_x_date(date_labels = "%B %Y" ) +
scale_y_continuous(labels = comma) +
labs(title = "A Comparison of Predicted and Observed COVID-19 Cases In The UK",
x = "Date",
y = "Number of Cases",
color = "Type of Case Data") +
theme_classic() +
theme(legend.position = "top")
ggplot(combined_data, aes(x = date, y = confirm, color = source)) +
geom_line(linewidth = 1) +
scale_color_manual(values = c("Predicted" = "slateblue", "Observed" = "orange")) +
scale_x_date(date_labels = "%B %Y" ) +
scale_y_continuous(labels = comma) +
labs(title = "A Comparison of Predicted and Observed COVID-19 Cases In The UK",
x = "Date",
y = "Number of Cases",
color = "Type of Case Data") +
theme_classic() +
theme(legend.position = "top")
setwd("C:/Users/OlamideAdenuga/Desktop/COVID-19 Forecasts Internship Project/HDR-UK-BIP-Covid19-Project")
getwd()
predicted_data = read.csv("predicted_cases.csv")
predicted_data <- predicted_data %>%
filter(region == "United Kingdom")   # filters the data for where the region is United Kingdom
predicted_data$date <- as.Date(predicted_data$date)    # converts the date (column) variable into an actual Date (class) format
predicted_data$region <- NULL   # region variable (column) is redundant and so can be removed using NULL
predicted_data <- predicted_data[, c("date", "confirm")]   # allows me to extract only the 2 variables (columns) that I needed from the data
# Plotting & formatting the line graph for the predicted data [incidence curve]: STEP 3
ggplot(predicted_data, aes(x = date, y = confirm)) +
geom_line(color = "slateblue", linewidth = 0.5) +   #linewidth dictates the size or 'thickness' of the line on the plot
scale_x_date(date_labels = "%B %Y") +
# modifies the x-axis to add month and year, not just have the month: %B = full month name and %Y = 4-digit year
scale_y_continuous(labels = comma) +   # modifies y-axis to make it more readable (e.g. from 2e+05 to 200,000) to show the actual integer
labs(title = "Predicted COVID-19 Cases in The United Kingdom",
x = "Date",
y = "Number of Predicted Cases") +
theme_classic()
# Transform the predicted data from an incidence plot to an cumulative plot plot to match that of the observed data:
predicted_data <- predicted_data %>%
arrange(date) %>%
mutate(confirm = cumsum(confirm)) %>%   # cumulative sum of incidence
select(date, confirm)
install.packages("COVID19")
library("COVID19")
observed_data <- covid19(country = "United Kingdom", level = 1, start = "2022-03-04", end = "2022-06-24")
observed_data$date <- as.Date(observed_data$date)    # converts the date (column) variable into an actual Date (class) format
observed_data <- observed_data[, c("date", "confirmed")]   # allows me to extract only the 2 variables (columns) that I needed from the data
observed_data <- observed_data %>%
rename(confirm = confirmed)
plot(observed_data)
ggplot(observed_data, aes(x = date, y = confirm)) +
geom_line(color = "red", linewidth = 0.5) +
scale_x_date(date_labels = "%B %Y") +
scale_y_continuous(labels = comma) +
labs(
title = "Observed COVID-19 Cases in The United Kingdom",
x = "Date",
y = "Number of Observed Cases"
) +
theme_classic()
setwd("C:/Users/OlamideAdenuga/Desktop/COVID-19 Forecasts Internship Project/HDR-UK-BIP-Covid19-Project")
getwd()
predicted_data = read.csv("predicted_cases.csv")
predicted_data <- predicted_data %>%
filter(region == "United Kingdom")   # filters the data for where the region is United Kingdom
predicted_data$date <- as.Date(predicted_data$date)    # converts the date (column) variable into an actual Date (class) format
predicted_data$region <- NULL   # region variable (column) is redundant and so can be removed using NULL
predicted_data <- predicted_data[, c("date", "confirm")]   # allows me to extract only the 2 variables (columns) that I needed from the data
# Plotting & formatting the line graph for the predicted data [incidence curve]: STEP 3
ggplot(predicted_data, aes(x = date, y = confirm)) +
geom_line(color = "slateblue", linewidth = 0.5) +   #linewidth dictates the size or 'thickness' of the line on the plot
scale_x_date(date_labels = "%B %Y") +
# modifies the x-axis to add month and year, not just have the month: %B = full month name and %Y = 4-digit year
scale_y_continuous(labels = comma) +   # modifies y-axis to make it more readable (e.g. from 2e+05 to 200,000) to show the actual integer
labs(title = "Predicted COVID-19 Cases in The United Kingdom",
x = "Date",
y = "Number of Predicted Cases") +
theme_classic()
predicted_data <- predicted_data %>%
arrange(date) %>%
mutate(confirm = cumsum(confirm)) %>%   # cumulative sum of incidence
select(date, confirm)
predicted_data <- predicted_data %>%
arrange(date) %>%
mutate(confirm = cumsum(confirm)) %>%   # cumulative sum of incidence
select(date, confirm)
ggplot(combined_data, aes(x = date, y = confirm, color = source)) +
geom_line(linewidth = 1) +
scale_color_manual(values = c("Predicted" = "slateblue", "Observed" = "orange")) +
scale_x_date(date_labels = "%B %Y" ) +
scale_y_continuous(labels = comma) +
labs(title = "A Comparison of Predicted and Observed COVID-19 Cases In The UK",
x = "Date",
y = "Number of Cases",
color = "Type of Case Data") +
theme_classic() +
theme(legend.position = "top")
install.packages("COVID19")
library("COVID19")
observed_data <- covid19(country = "United Kingdom", level = 1, start = "2022-03-04", end = "2022-06-24")
observed_data$date <- as.Date(observed_data$date)    # converts the date (column) variable into an actual Date (class) format
observed_data <- observed_data[, c("date", "confirmed")]   # allows me to extract only the 2 variables (columns) that I needed from the data
observed_data <- observed_data %>%
rename(confirm = confirmed)
plot(observed_data)   # the output was a cumulative plot
ggplot(observed_data, aes(x = date, y = confirm)) +
geom_line(color = "red", linewidth = 0.5) +
scale_x_date(date_labels = "%B %Y") +
scale_y_continuous(labels = comma) +
labs(
title = "Observed COVID-19 Cases in The United Kingdom",
x = "Date",
y = "Number of Observed Cases"
) +
theme_classic()
library(dplyr)   # for data manipulation (e.g. aggregating data)
library(scales)   # better date formatting
library(ggplot2)   # for plotting graphs
library(digest)   # creates hash values for data, which is essential for caching, data verification and ensuring reproducibility
setwd("C:/Users/OlamideAdenuga/Desktop/COVID-19 Forecasts Internship Project/HDR-UK-BIP-Covid19-Project")
getwd()
predicted_data = read.csv("predicted_cases.csv")
predicted_data <- predicted_data %>%
filter(region == "United Kingdom")   # filters the data for where the region is United Kingdom
predicted_data$date <- as.Date(predicted_data$date)    # converts the date (column) variable into an actual Date (class) format
predicted_data$region <- NULL   # region variable (column) is redundant and so can be removed using NULL
predicted_data <- predicted_data[, c("date", "confirm")]   # allows me to extract only the 2 variables (columns) that I needed from the data
# Plotting & formatting the line graph for the predicted data [incidence curve]: STEP 3
ggplot(predicted_data, aes(x = date, y = confirm)) +
geom_line(color = "slateblue", linewidth = 0.5) +   #linewidth dictates the size or 'thickness' of the line on the plot
scale_x_date(date_labels = "%B %Y") +
# modifies the x-axis to add month and year, not just have the month: %B = full month name and %Y = 4-digit year
scale_y_continuous(labels = comma) +   # modifies y-axis to make it more readable (e.g. from 2e+05 to 200,000) to show the actual integer
labs(title = "Predicted COVID-19 Cases in The United Kingdom",
x = "Date",
y = "Number of Predicted Cases") +
theme_classic()
predicted_data <- predicted_data %>%
arrange(date) %>%
mutate(confirm = cumsum(confirm)) %>%   # cumulative sum of incidence
select(date, confirm)
ggplot(predicted_data, aes(x = date, y = confirm)) +
geom_line(color = "red", linewidth = 0.5) +
scale_x_date(date_labels = "%B %Y") +
scale_y_continuous(labels = comma) +
labs(
title = "Predicted COVID-19 Cases in The United Kingdom",
x = "Date",
y = "Number of Predicted Cases"
) +
theme_classic()
redicted_data <- predicted_data %>% select(date, confirm)
observed_data <- observed_data %>% select(date, confirm)
predicted_data$source <- "Predicted"
observed_data$source <- "Observed"
combined_data <- bind_rows(predicted_data, observed_data)
ggplot(combined_data, aes(x = date, y = confirm, color = source)) +
geom_line(linewidth = 1) +
scale_color_manual(values = c("Predicted" = "slateblue", "Observed" = "orange")) +
scale_x_date(date_labels = "%B %Y" ) +
scale_y_continuous(labels = comma) +
labs(title = "A Comparison of Predicted and Observed COVID-19 Cases In The UK",
x = "Date",
y = "Number of Cases",
color = "Type of Case Data") +
theme_classic() +
theme(legend.position = "top")
View(redicted_data)
